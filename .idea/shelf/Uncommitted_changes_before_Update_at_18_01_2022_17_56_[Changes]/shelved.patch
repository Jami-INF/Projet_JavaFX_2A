Index: project/src/view/game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\nimport javafx.application.Platform;\r\nimport javafx.beans.binding.Bindings;\r\nimport javafx.beans.binding.When;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.BoundingBox;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.Parent;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\nimport controller.mouvement;\r\nimport javafx.event.EventHandler;\r\nimport javafx.geometry.VPos;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.TextAlignment;\r\nimport controller.*;\r\nimport model.Joueur;\r\nimport model.*;\r\nimport javafx.animation.AnimationTimer;\r\n\r\npublic class game {\r\n    static Scene s;\r\n\r\n    long timegame = 0;\r\n    private Integer timejeu = 0;\r\n    private Integer timetmp = 0;\r\n    Boolean isCollide;\r\n    int DureeSaut = 10;//surée saut en tick\r\n    int tmpDureeSaut;\r\n\r\n    public void startgame(Stage stage) {\r\n        //System.out.println(\"fdfzfzdfzf\");\r\n        Group g = new Group();\r\n        s = new Scene(g,1280,720);\r\n        stage.setScene(s);\r\n        collision collisionController = new collision();\r\n        actionClavier action = new actionClavier();\r\n        mouvement mouvementJoueur = new mouvement();\r\n\r\n        //ActionMouvement(mouvementJoueur);\r\n        ////BACKGROUND\r\n        Image background = new Image (getClass().getClassLoader().getResource(\"image/background.jpg\").toExternalForm());\r\n        ImageView backgroundIV = new ImageView (getClass().getClassLoader().getResource(\"image/background.jpg\").toExternalForm());\r\n        g.getChildren().add(backgroundIV);\r\n        ////////////\r\n\r\n        ////JOUEUR\r\n        Image Skin = new Image(getClass().getClassLoader().getResource(\"image/testpers.png\").toExternalForm());\r\n        Joueur j1 = new Joueur(Skin, 20, 20, 10, 0, 0,\"Joueur1\");\r\n\r\n\r\n        //ImageView joueurIV = new ImageView(getClass().getClassLoader().getResource(\"image/testpers.png\").toExternalForm());\r\n        ////////////\r\n\r\n        //Image bg = new Image(getClass().getClassLoader().getResource(\"image/background.png\").toExternalForm());\r\n\r\n        //s.setFill(Color.grayRgb(35));\r\n        ArrayList<Plateforme> plateformeArrayList = new ArrayList<Plateforme>();\r\n        ArrayList<Entite> entites = new ArrayList<Entite>();\r\n\r\n        Image Platform = new Image(getClass().getClassLoader().getResource(\"image/platform.png\").toExternalForm());\r\n        Plateforme p1 = new Plateforme(Platform, 100, 600, 100, 100, 200, true);\r\n        Plateforme p2 = new Plateforme(Platform, 100, 600, 100,300, 500,true);\r\n        Plateforme p3 = new Plateforme(Platform, 100, 600, 100, 500, 500,true);\r\n        Plateforme p4 = new Plateforme(Platform, 100, 600, 100, 700, 500,true);\r\n        Plateforme p5 = new Plateforme(Platform, 100, 600, 100, 900, 500,true);\r\n        Plateforme p6 = new Plateforme(Platform, 100, 600, 100, 800, 400,true);\r\n        Plateforme p7 = new Plateforme(Platform, 100, 600, 100, 700, 300,true);\r\n\r\n\r\n\r\n\r\n        plateformeArrayList.add(p1);\r\n        plateformeArrayList.add(p2);\r\n        plateformeArrayList.add(p3);\r\n        plateformeArrayList.add(p4);\r\n        plateformeArrayList.add(p5);\r\n        plateformeArrayList.add(p6);\r\n        plateformeArrayList.add(p7);\r\n\r\n        entites.add(j1);\r\n        entites.add(p1);\r\n        entites.add(p2);\r\n        entites.add(p3);\r\n        entites.add(p4);\r\n        entites.add(p5);\r\n        entites.add(p6);\r\n        entites.add(p7);\r\n\r\n\r\n        for (Entite enti : entites) {\r\n            g.getChildren().add(enti.getIV());\r\n        }\r\n\r\n        Timer timer = new java.util.Timer();\r\n\r\n        Thread t = new Thread(() -> {\r\n            while(true){\r\n                Boolean exit = true;\r\n                timetmp++;\r\n                timejeu = timetmp/60;\r\n\r\n\r\n\r\n                //AffichTimeHautEcran(timejeu.toString(), canvas);\r\n\r\n                javafx.application.Platform.runLater(() -> {\r\n                    timer.schedule(new TimerTask(){\r\n                        public void run(){\r\n                            AffichTime(timetmp);\r\n                        }\r\n                    }, 1000);\r\n                    ActionMouvement(action);\r\n                    action.ActionLectureListe(action, j1, stage, entites);\r\n                    collisionController.verify(plateformeArrayList, j1);\r\n                    mouvementJoueur.UpdateJoueur(j1);\r\n\r\n                });\r\n\r\n                try {\r\n                    Thread.sleep(200);\r\n                } catch (InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n\r\n        t.setDaemon(true);\r\n        t.start();\r\n        stage.show();\r\n\r\n    }\r\n/*\r\n    private void AffichTimeHautEcran(String time, Canvas canvas){\r\n        graphicsContext.clearRect(20, 20, canvas.getWidth(),30);\r\n        graphicsContext.setTextAlign(TextAlignment.CENTER);\r\n        graphicsContext.setTextBaseline(VPos.CENTER);\r\n        graphicsContext.setFont(new Font(30));\r\n        graphicsContext.fillText(time, Math.round(canvas.getWidth()  / 2), 30);\r\n        graphicsContext.setFill(Color.WHITESMOKE);\r\n    }\r\n*/\r\n\r\n    private static void AffichTime(double i){\r\n        System.out.println(i);\r\n        //affichage dans le jeu\r\n    }\r\n\r\n    private static void ActionMouvement (actionClavier action) {\r\n        s.setOnKeyPressed(\r\n                new EventHandler<KeyEvent>() {\r\n                    public void handle(KeyEvent e) {\r\n                        String in = e.getCode().toString();\r\n                        if ( !action.getInput().contains(in) )\r\n                            action.addInput( in );\r\n                    }\r\n                });\r\n        s.setOnKeyReleased(\r\n\r\n                new EventHandler<KeyEvent>() {\r\n                    public void handle(KeyEvent e) {\r\n                        String in = e.getCode().toString();\r\n                        action.removeInput( in );\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/view/game.java b/project/src/view/game.java
--- a/project/src/view/game.java	(revision 036aaf02567b6465cacb33a2be21c1eda35c45fc)
+++ b/project/src/view/game.java	(date 1642519337708)
@@ -135,11 +135,10 @@
                 }
             }
         });
-
         t.setDaemon(true);
         t.start();
         stage.show();
-
+        //timer.cancel();
     }
 /*
     private void AffichTimeHautEcran(String time, Canvas canvas){
@@ -154,7 +153,7 @@
 
     private static void AffichTime(double i){
         System.out.println(i);
-        //affichage dans le jeu
+        //affichage dans le terminal
     }
 
     private static void ActionMouvement (actionClavier action) {
Index: project/src/model/Joueur.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\nimport controller.mouvement;\r\nimport javafx.geometry.BoundingBox;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.control.Skin;\r\nimport javafx.scene.image.Image;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Joueur extends Entite {\r\n\r\n    private int vie;\r\n    private String pseudo;\r\n    private double velociteY;\r\n    private double velociteX;\r\n    private boolean inJump;\r\n    private boolean canJump;\r\n    private boolean isMouvementAvant;\r\n    private boolean isMouvementArriere;\r\n    private double jumpHauteur = 150;\r\n    private double gravite = 10;\r\n    private double size;\r\n    private Image skin;\r\n    private double imageSize;\r\n    private boolean isCollideUp = false;\r\n    private boolean isCollideDown = false;\r\n    private boolean isCollideLeft = false;\r\n    private boolean isCollideRight = false;\r\n    private int dureesauttmp = 0;//variable temporaire pour savoir depuis combien de temps le joueur est en train de sauter\r\n\r\n\r\n    /**\r\n     * Constructeur de Joueur\r\n     * @param Skin\r\n     * @param VelociteX\r\n     * @param VelociteY\r\n     * @param Size\r\n     * @param SpawnX\r\n     * @param SpawnY\r\n     * @param Pseudo\r\n     */\r\n    public Joueur(Image Skin, double VelociteX, double VelociteY, double Size, double SpawnX, double SpawnY, String Pseudo) {\r\n        super(Skin, VelociteX, VelociteY, Size, SpawnX, SpawnY);\r\n        vie=10;//A modifier peut etre ?\r\n        Pseudo = pseudo;\r\n        isMouvementArriere=false;\r\n        isMouvementAvant = false;\r\n        velociteX = VelociteX;\r\n        velociteY = VelociteY;\r\n        size = Size;\r\n        skin = Skin;\r\n        imageSize = size;\r\n        setFitWidth(imageSize);\r\n        setFitHeight(imageSize);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de connaitre la vie du joueur\r\n     * @return vie du joueur en int\r\n     */\r\n    public int getVie()\r\n    {\r\n        return vie;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de seter la vie du joueur\r\n     * @param pv\r\n     */\r\n    public void setVie(int pv)\r\n    {\r\n        vie=pv;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de récuperer le pseudo du joueur\r\n     * @return pseudo du joueur en String\r\n     */\r\n    public String getPseudo() {\r\n        return pseudo;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de seter le pseudo du joueur\r\n     * @param pseudo\r\n     */\r\n    public void setPseudo(String pseudo) {\r\n        this.pseudo = pseudo;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de savoir si le joueur est en train de sauter\r\n     * @return inJump en boolean\r\n     */\r\n    public Boolean isInJump () {\r\n        return inJump;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter le fait que le joueur soit en train de sauter\r\n     * @param b\r\n     */\r\n    public void setInJump (Boolean b) {\r\n        inJump = b;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de savoir si le joueur est en collision avec le plafond\r\n     * @return isCollideUp en boolean\r\n     */\r\n    public Boolean getiscollideUp() {\r\n        return isCollideUp;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter si le joueur est en collision avec le plafond\r\n     * @param b\r\n     */\r\n    public void setiscollideUp(Boolean b) {\r\n        isCollideUp = b;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de savoir si le joueur est en collision avec le sol\r\n     * @return isCollideDown en boolean\r\n     */\r\n    public Boolean getiscollideDown() {\r\n        return isCollideDown;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter si le joueur est en collision avec le sol\r\n     * @param b\r\n     */\r\n    public void setiscollideDown(Boolean b) {\r\n        isCollideDown = b;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de savoir si le joueur est en collision sur la gauche\r\n     * @return isCollideLeft en boolean\r\n     */\r\n    public Boolean getiscollideLeft() {\r\n        return isCollideLeft;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter si le joueur est en collision sur la gauche\r\n     * @param b\r\n     */\r\n    public void setiscollideLeft(Boolean b) {\r\n        isCollideLeft = b;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de savoir si le joueur est en collision sur la droite\r\n     * @return isCollideRight en boolean\r\n     */\r\n    public Boolean getiscollideRight() {\r\n        return isCollideRight;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter si le joueur est en collision sur la droite\r\n     * @param b\r\n     */\r\n    public void setiscollideRight(Boolean b) {\r\n        isCollideRight = b;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter la velocitéX du joueur\r\n     * @param velociteX\r\n     */\r\n    public void setVelociteX(double velociteX) {\r\n        this.velociteX = velociteX;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter la velocitéY du joueur\r\n     * @param velociteY\r\n     */\r\n    public void setVelociteY(double velociteY) {\r\n        this.velociteY = velociteY;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de recupérer la velocitéX du joueur\r\n     * @return velociteX en double\r\n     */\r\n    public double getVelociteX() {\r\n        return velociteX;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de recupérer la velocitéY du joueur\r\n     * @return velociteY en double\r\n     */\r\n    public double getVelociteY() {\r\n        return velociteY;\r\n    }\r\n\r\n    public void setJumpHauteur(double jumpHauteur) {\r\n        this.jumpHauteur = jumpHauteur;\r\n    }\r\n\r\n    public double getJumpHauteur() {\r\n        return jumpHauteur;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de seter la gravité pour le joueur\r\n     * @param gravite\r\n     */\r\n    public void setGravite(double gravite) {\r\n        this.gravite = gravite;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de recupérer la gravité du joueur\r\n     * @return gravite en double\r\n     */\r\n    public double getGravite() {\r\n        return gravite;\r\n    }\r\n\r\n    public void setSize(double size) {\r\n        this.size = size;\r\n    }\r\n\r\n    public double getSize() {\r\n        return size;\r\n    }\r\n\r\n    public void setSkin(Image skin) {\r\n        this.skin = skin;\r\n    }\r\n\r\n    public Image getSkin() {\r\n        return skin;\r\n    }\r\n\r\n    public void setImageSize(double imageSize) {\r\n        this.imageSize = imageSize;\r\n    }\r\n\r\n    public double getImageSize() {\r\n        return imageSize;\r\n    }\r\n\r\n    public void setIsMouvementAvant(boolean isMouvementAvant) {\r\n        this.isMouvementAvant = isMouvementAvant;\r\n    }\r\n\r\n    public void setIsMouvementArriere(boolean isMouvementArriere) {\r\n        this.isMouvementArriere = isMouvementArriere;\r\n    }\r\n\r\n    public boolean isMouvementAvant() {\r\n        return isMouvementAvant;\r\n    }\r\n\r\n    public boolean isMouvementArriere() {\r\n        return isMouvementArriere;\r\n    }\r\n    public int getDureesauttmp() {\r\n        return dureesauttmp;\r\n    }\r\n    public void setDureesauttmp(int dureesauttmp) {\r\n        this.dureesauttmp = dureesauttmp;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de seter la possibiliter de sauter pour le joueur\r\n     * @param canJump\r\n     */\r\n    public void setCanJump(boolean canJump) {\r\n        this.canJump = canJump;\r\n    }\r\n    /**\r\n     * Methode qui permet de savoir si le joueur peut sauter\r\n     * @return canJump en boolean\r\n     */\r\n    public boolean getCanJump() {\r\n        return canJump;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter les booleens de mouvement du joueur si il avance\r\n     */\r\n    public void mouvementavantX() {\r\n        isMouvementAvant = true;\r\n        isMouvementArriere = false;\r\n        isCollideLeft = false;\r\n        //IV.setX(IV.getX()+5);\r\n        //System.out.println(\"zefzfezfe\");\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter les booleens de mouvement du joueur si il recule\r\n     */\r\n    public void mouvementarriereX() {\r\n        isMouvementArriere = true;\r\n        isMouvementAvant = false;\r\n        isCollideRight = false;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de setter les booleens de mouvement du joueur si il arrete de bouger\r\n     */\r\n    public void arretmouvement(){\r\n        isMouvementArriere = false;\r\n        isMouvementAvant = false;\r\n        isCollideLeft = false;\r\n        isCollideRight = false;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de récuperer les booleens de mouvement du joueur si il recule\r\n     * @return isMouvementArriere en boolean\r\n     */\r\n    public boolean getisMouvementArriere(){\r\n        return isMouvementArriere;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de récuperer les booleens de mouvement du joueur si il avance\r\n     * @return isMouvementAvant en boolean\r\n     */\r\n    public boolean getisMouvementAvant(){\r\n        return isMouvementAvant;\r\n    }\r\n\r\n    /**\r\n     * Methode qui permet de faire sauter le joueur si il est en collision avec le sol\r\n     */\r\n    public void saut() {\r\n\r\n        if (canJump && isCollideDown) {\r\n            inJump = true;\r\n            canJump = false;\r\n            System.out.println(\"mouvement saut\");\r\n        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/model/Joueur.java b/project/src/model/Joueur.java
--- a/project/src/model/Joueur.java	(revision 036aaf02567b6465cacb33a2be21c1eda35c45fc)
+++ b/project/src/model/Joueur.java	(date 1642520284139)
@@ -294,8 +294,6 @@
         isMouvementAvant = true;
         isMouvementArriere = false;
         isCollideLeft = false;
-        //IV.setX(IV.getX()+5);
-        //System.out.println("zefzfezfe");
     }
 
     /**
Index: project/src/model/Entite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\nimport javafx.geometry.BoundingBox;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic abstract class Entite extends ImageView {\r\n\r\n    private double vitesse = 300;\r\n\r\n    private double gravite = 5;\r\n\r\n    private double imageSize;\r\n\r\n    private double x;\r\n    private double y;\r\n    private Image skin;\r\n    private double velociteX;\r\n    private double velociteY;\r\n\r\n    ImageView IV;\r\n\r\n    public Entite(Image Skin, double VelociteX, double VelociteY, double Size, double SpawnX, double SpawnY){\r\n        IV = new ImageView(Skin);\r\n        skin = Skin;\r\n        IV.setY(SpawnY);\r\n        IV.setX(SpawnX);\r\n\r\n        VelociteY = velociteY;\r\n        VelociteX = velociteX;\r\n\r\n\r\n    }\r\n    public ImageView getIV(){\r\n        return IV;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/model/Entite.java b/project/src/model/Entite.java
--- a/project/src/model/Entite.java	(revision 036aaf02567b6465cacb33a2be21c1eda35c45fc)
+++ b/project/src/model/Entite.java	(date 1642519033172)
@@ -18,6 +18,7 @@
     private Image skin;
     private double velociteX;
     private double velociteY;
+    private double time;
 
     ImageView IV;
 
@@ -32,6 +33,7 @@
 
 
     }
+
     public ImageView getIV(){
         return IV;
     }
